// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ZettelKasten.ORM;

#nullable disable

namespace ZettelKasten.Migrations
{
    [DbContext(typeof(ZettelkastenContext))]
    [Migration("20240107135303_add_color")]
    partial class add_color
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ZettelKasten.Models.DTO.Note", b =>
                {
                    b.Property<Guid>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("noteid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdon");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.HasKey("NoteId")
                        .HasName("notes_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("notes", (string)null);
                });

            modelBuilder.Entity("ZettelKasten.Models.DTO.NoteRelation", b =>
                {
                    b.Property<Guid>("RelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("relationid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("SourceNoteId")
                        .HasColumnType("uuid")
                        .HasColumnName("sourcenoteid");

                    b.Property<Guid?>("TargetNoteId")
                        .HasColumnType("uuid")
                        .HasColumnName("targetnoteid");

                    b.HasKey("RelationId")
                        .HasName("noterelations_pkey");

                    b.HasIndex("SourceNoteId");

                    b.HasIndex("TargetNoteId");

                    b.ToTable("noterelations", (string)null);
                });

            modelBuilder.Entity("ZettelKasten.Models.DTO.NoteTagRelation", b =>
                {
                    b.Property<Guid>("RelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("relationid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("NoteId")
                        .HasColumnType("uuid")
                        .HasColumnName("noteid");

                    b.Property<Guid?>("TagId")
                        .HasColumnType("uuid")
                        .HasColumnName("tagid");

                    b.HasKey("RelationId")
                        .HasName("notetagrelations_pkey");

                    b.HasIndex("NoteId");

                    b.HasIndex("TagId");

                    b.ToTable("notetagrelations", (string)null);
                });

            modelBuilder.Entity("ZettelKasten.Models.DTO.Tag", b =>
                {
                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("tagid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("TagId")
                        .HasName("tags_pkey");

                    b.HasIndex(new[] { "Name" }, "tags_name_key")
                        .IsUnique();

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("ZettelKasten.Models.DTO.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("userid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("login");

                    b.Property<string>("Pass")
                        .HasColumnType("character varying")
                        .HasColumnName("pass");

                    b.HasKey("UserId")
                        .HasName("users_pkey");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ZettelKasten.Models.DTO.Note", b =>
                {
                    b.HasOne("ZettelKasten.Models.DTO.User", "User")
                        .WithMany("Notes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("notes_userid_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZettelKasten.Models.DTO.NoteRelation", b =>
                {
                    b.HasOne("ZettelKasten.Models.DTO.Note", "SourceNote")
                        .WithMany("NoteRelationSourceNotes")
                        .HasForeignKey("SourceNoteId")
                        .HasConstraintName("noterelations_sourcenoteid_fkey");

                    b.HasOne("ZettelKasten.Models.DTO.Note", "TargetNote")
                        .WithMany("NoteRelationTargetNotes")
                        .HasForeignKey("TargetNoteId")
                        .HasConstraintName("noterelations_targetnoteid_fkey");

                    b.Navigation("SourceNote");

                    b.Navigation("TargetNote");
                });

            modelBuilder.Entity("ZettelKasten.Models.DTO.NoteTagRelation", b =>
                {
                    b.HasOne("ZettelKasten.Models.DTO.Note", "Note")
                        .WithMany("NoteTagRelations")
                        .HasForeignKey("NoteId")
                        .HasConstraintName("notetagrelations_noteid_fkey");

                    b.HasOne("ZettelKasten.Models.DTO.Tag", "Tag")
                        .WithMany("NoteTagRelations")
                        .HasForeignKey("TagId")
                        .HasConstraintName("notetagrelations_tagid_fkey");

                    b.Navigation("Note");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ZettelKasten.Models.DTO.Note", b =>
                {
                    b.Navigation("NoteRelationSourceNotes");

                    b.Navigation("NoteRelationTargetNotes");

                    b.Navigation("NoteTagRelations");
                });

            modelBuilder.Entity("ZettelKasten.Models.DTO.Tag", b =>
                {
                    b.Navigation("NoteTagRelations");
                });

            modelBuilder.Entity("ZettelKasten.Models.DTO.User", b =>
                {
                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}
